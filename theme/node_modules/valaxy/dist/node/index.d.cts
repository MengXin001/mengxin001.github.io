import { ViteSSGOptions } from 'vite-ssg';
export { cli, run } from './cli/index.cjs';
import * as vite from 'vite';
import { UserConfig, InlineConfig } from 'vite';
import * as valaxy_types from 'valaxy/types';
import { DefaultTheme, ValaxyConfig, PartialDeep, ValaxyAddon, RuntimeConfig, SiteConfig, UserSiteConfig } from 'valaxy/types';
import Vue from '@vitejs/plugin-vue';
import Components from 'unplugin-vue-components/vite';
import Layouts from 'vite-plugin-vue-layouts';
import Router from 'unplugin-vue-router/vite';
import { VitePluginConfig } from 'unocss/vite';
import { EditableTreeNode } from 'unplugin-vue-router';
import { presetUno, presetAttributify, presetIcons, presetTypography } from 'unocss';
import { Hookable } from 'hookable';
import MarkdownIt from 'markdown-it';
import { ILanguageRegistration, IThemeRegistration } from 'shiki';
import anchorPlugin from 'markdown-it-anchor';
import { KatexOptions } from 'katex';
import { FrontmatterPluginOptions } from '@mdit-vue/plugin-frontmatter';
import { HeadersPluginOptions } from '@mdit-vue/plugin-headers';
import { SfcPluginOptions } from '@mdit-vue/plugin-sfc';
import { TocPluginOptions } from '@mdit-vue/plugin-toc';
import { ComponentPluginOptions } from '@mdit-vue/plugin-component';
import { Awaitable } from '@antfu/utils';
import * as defu from 'defu';
import { P as PartialDeep$1 } from '../config-hKSeaczj.cjs';
import 'yargs';
import 'medium-zoom';
import '@vueuse/integrations/useFuse';
import 'vanilla-lazyload';
import '@unhead/schema-org';

declare module 'vite' {
    interface UserConfig {
        ssgOptions?: ViteSSGOptions;
    }
}

interface BlockItem {
    text?: string;
    icon?: string;
    color?: string;
    /**
     * for i18n
     */
    langs?: {
        [key: string]: string;
    };
}
interface Blocks {
    tip?: BlockItem;
    warning?: BlockItem;
    danger?: BlockItem;
    info?: BlockItem;
    details?: BlockItem;
}

type ThemeOptions = IThemeRegistration | {
    light: IThemeRegistration;
    dark: IThemeRegistration;
};
interface MarkdownOptions {
    /**
     * Setup markdown-it instance before applying plugins
     */
    preConfig?: (md: MarkdownIt) => void;
    /**
     * markdown-it options
     */
    options?: MarkdownIt.Options;
    /**
     * config markdown-it
     */
    config?: (md: MarkdownIt) => void;
    anchor?: anchorPlugin.AnchorOptions;
    attrs?: {
        leftDelimiter?: string;
        rightDelimiter?: string;
        allowedAttributes?: string[];
        disable?: boolean;
    };
    defaultHighlightLang?: string;
    frontmatter?: FrontmatterPluginOptions;
    headers?: HeadersPluginOptions;
    sfc?: SfcPluginOptions;
    toc?: TocPluginOptions;
    /**
     * Options for `@mdit-vue/plugin-component`
     * @see https://github.com/mdit-vue/mdit-vue/tree/main/packages/plugin-component
     */
    component?: ComponentPluginOptions;
    /**
     * @see [markdown-it-image-figures](https://www.npmjs.com/package/markdown-it-image-figures)
     */
    imageFigures?: {
        lazy: boolean;
        removeSrc: boolean;
        async: boolean;
        classes: string;
    };
    lineNumbers?: boolean;
    /**
     * @see https://katex.org/docs/options.html
     */
    katex?: KatexOptions;
    /**
     * shiki
     */
    theme?: ThemeOptions;
    languages?: ILanguageRegistration[];
    /**
     * Custom block configurations
     */
    blocks?: Blocks;
    externalLinks?: Record<string, string>;
}

type ValaxyNodeConfig<ThemeConfig = DefaultTheme.Config> = ValaxyConfig<ThemeConfig> & ValaxyExtendConfig;
type UserValaxyNodeConfig<ThemeConfig = DefaultTheme.Config> = PartialDeep<ValaxyNodeConfig<ThemeConfig>>;
/**
 * fn with options for theme config
 */
type ValaxyConfigFn<ThemeConfig = DefaultTheme.Config> = (options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyNodeConfig | Promise<ValaxyNodeConfig>;
type ValaxyConfigExport<ThemeConfig = DefaultTheme.Config> = ValaxyNodeConfig<ThemeConfig> | ValaxyConfigFn<ThemeConfig>;
type HookResult = Promise<void> | void;
interface ValaxyHooks {
    'options:resolved': () => HookResult;
    'config:init': () => HookResult;
    /**
     * @see valaxy/node/plugins/vueRouter.ts extendRoute
     */
    'vue-router:extendRoute': (route: EditableTreeNode) => HookResult;
    'build:before': () => HookResult;
    'build:after': () => HookResult;
}
interface ValaxyNode {
    version: string;
    hooks: Hookable<ValaxyHooks>;
    hook: ValaxyNode['hooks']['hook'];
    options: ResolvedValaxyOptions;
}
interface ValaxyExtendConfig {
    /**
     * internal modules
     */
    modules: {
        rss: {
            /**
             * enable rss
             */
            enable: boolean;
        };
    };
    /**
     * Markdown Feature
     */
    features: {
        /**
         * enable katex for global
         */
        katex: boolean;
    };
    vite?: UserConfig;
    vue?: Parameters<typeof Vue>[0];
    components?: Parameters<typeof Components>[0];
    layouts?: Parameters<typeof Layouts>[0];
    router?: Parameters<typeof Router>[0];
    unocss?: VitePluginConfig;
    /**
     * unocss presets
     */
    unocssPresets?: {
        uno?: Parameters<typeof presetUno>[0];
        attributify?: Parameters<typeof presetAttributify>[0];
        icons?: Parameters<typeof presetIcons>[0];
        typography?: Parameters<typeof presetTypography>[0];
    };
    /**
     * @experimental
     * Enable Vue Devtools & Valaxy Devtools
     * @see https://devtools-next.vuejs.org/
     */
    devtools?: boolean;
    /**
     * for markdown
     */
    markdown?: MarkdownOptions;
    extendMd?: (ctx: {
        route: EditableTreeNode;
        data: Readonly<Record<string, any>>;
        content: string;
        excerpt?: string;
        path: string;
    }) => void;
    addons?: ValaxyAddons;
    hooks?: Partial<ValaxyHooks>;
}
type ValaxyAddonLike = ValaxyAddon | false | null | undefined;
type ValaxyAddons = (ValaxyAddon | string)[] | Record<string, ValaxyAddonLike>;
type ValaxyAddonFn<ThemeConfig = DefaultTheme.Config> = (addonOptions: ValaxyAddonResolver, valaxyOptions: ResolvedValaxyOptions<ThemeConfig>) => ValaxyNodeConfig | Promise<ValaxyNodeConfig>;
type ValaxyAddonExport<ThemeConfig = DefaultTheme.Config> = ValaxyNodeConfig<ThemeConfig> | ValaxyAddonFn<ThemeConfig>;
interface ValaxyAddonResolver {
    name: string;
    root: string;
    enable: boolean;
    global: boolean;
    props: Record<string, any>;
    options: Record<string, any>;
    configFile?: string;
    pkg: Record<string, any>;
    setup?: (node: ValaxyNode) => void;
}

interface ValaxyEntryOptions {
    /**
     * theme name
     */
    theme?: string;
    userRoot: string;
}
interface ResolvedValaxyOptions<ThemeConfig = DefaultTheme.Config> {
    mode: 'dev' | 'build';
    /**
     * package.json root
     */
    pkgRoot: string;
    /**
     * Client root path
     * @default 'valaxy/client'
     */
    clientRoot: string;
    /**
     * User root path
     * @default process.cwd()
     */
    userRoot: string;
    /**
     * Theme root path
     */
    themeRoot: string;
    /**
     * Addon root path
     */
    addonRoots: string[];
    /**
     * clientRoot, themeRoot, ...addonRoots, userRoot
     */
    roots: string[];
    theme: string;
    /**
     * Valaxy Config
     */
    config: ValaxyNodeConfig<ThemeConfig> & {
        /**
         * Generated Runtime Config
         */
        runtimeConfig: RuntimeConfig;
    };
    /**
     * config file path
     */
    configFile: string;
    siteConfigFile: string;
    themeConfigFile: string;
    pages: string[];
    /**
     * all addons
     * Record<package-name, OptionResolver>
     */
    addons: ValaxyAddonResolver[];
}
interface ValaxyServerOptions {
    onConfigReload?: (newConfig: ValaxyNodeConfig, config: ValaxyNodeConfig, force?: boolean) => void;
}
/**
 * Post process valaxyOptions
 * @param valaxyOptions
 * @param valaxyConfig
 */
declare function processValaxyOptions(valaxyOptions: ResolvedValaxyOptions, valaxyConfig: ValaxyNodeConfig): Promise<ResolvedValaxyOptions<DefaultTheme.Config>>;
declare function resolveOptions(options?: ValaxyEntryOptions, mode?: ResolvedValaxyOptions['mode']): Promise<ResolvedValaxyOptions<DefaultTheme.Config>>;
/**
 * resolve theme config
 * @param options
 */
declare function resolveThemeValaxyConfig(options: ResolvedValaxyOptions): Promise<ValaxyNodeConfig>;

/**
 * merge vite.config.ts (user & theme)
 * @internal
 */
declare function mergeViteConfigs({ userRoot, themeRoot }: ResolvedValaxyOptions, command: 'serve' | 'build'): Promise<InlineConfig>;
/**
 * generate index.html from user/theme/client
 * @internal
 */
declare function getIndexHtml({ clientRoot, themeRoot, userRoot, config }: ResolvedValaxyOptions, rawHtml: string): Promise<string>;

declare function build(options: ResolvedValaxyOptions, viteConfig?: InlineConfig): Promise<void>;
declare function ssgBuild(options: ResolvedValaxyOptions, viteConfig?: InlineConfig): Promise<void>;
/**
 * post process for ssg fix extra string like `/html>` `ml>` `l>`
 * handle tasks after ssg build
 * todo find why
 * @param options
 */
declare function postProcessForSSG(options: ResolvedValaxyOptions): Promise<void>;
declare function generateClientRedirects(options: ResolvedValaxyOptions): Promise<void>;

interface LoadConfigFromFileOptions {
    cwd?: string;
    valaxyOptions?: ResolvedValaxyOptions;
}
type UserInputConfig = Record<string, any>;
interface ResolvedConfig<T extends UserInputConfig = UserInputConfig> {
    config: T;
    configFile: string;
}
declare function loadConfig<T extends UserInputConfig = UserInputConfig>(options: {
    name: string;
    cwd: string;
}): ResolvedConfig<T>;
declare function loadConfigFromFile<T extends UserInputConfig>(file: string, options?: LoadConfigFromFileOptions): Promise<ResolvedConfig<T>>;

declare const defaultValaxyConfig: ValaxyNodeConfig;
/**
 * Type helper for valaxy.config.ts
 */
declare function defineValaxyConfig<ThemeConfig>(config: UserValaxyNodeConfig<ThemeConfig>): PartialDeep$1<ValaxyNodeConfig<ThemeConfig>>;
declare const defineConfig: typeof defineValaxyConfig;
declare function resolveValaxyConfigFromRoot(root: string, options?: ResolvedValaxyOptions): Promise<ResolvedConfig<ValaxyNodeConfig>>;
/**
 * merge valaxy.config
 * (source, default)
 */
declare const mergeValaxyConfig: <Source extends {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, Defaults extends ({
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
} | (number | boolean | any[] | Record<never, any> | null | undefined))[]>(source: Source, ...defaults: Defaults) => defu.Defu<Source, Defaults>;
/**
 * resolve user valaxy config
 * options only have userRoot
 * @param options
 */
declare function resolveValaxyConfig(options: ValaxyEntryOptions): Promise<{
    config: ValaxyNodeConfig;
    configFile: string;
    theme: string;
}>;

declare function defineValaxyAddon<AddonOptions = object>(addonFunc: (addonOptions?: AddonOptions, valaxyOptions?: ResolvedValaxyOptions) => ValaxyAddon & {
    setup?: ValaxyAddonResolver['setup'];
}): (addonOptions?: AddonOptions, valaxyOptions?: ResolvedValaxyOptions) => ValaxyAddon & {
    setup?: ValaxyAddonResolver['setup'];
};
declare const defineAddon: typeof defineValaxyAddon;
declare function resolveAddonConfig(addons: ValaxyAddonResolver[], _options?: ResolvedValaxyOptions): Promise<ValaxyNodeConfig>;

declare const defaultSiteConfig: SiteConfig;
/**
 * Type helper for site.config.ts
 * @param config
 */
declare function defineSiteConfig(config: UserSiteConfig): valaxy_types.PartialDeep<SiteConfig>;
/**
 * resolve valaxy config from special root
 */
declare function resolveSiteConfigFromRoot(root: string): Promise<ResolvedConfig<valaxy_types.PartialDeep<SiteConfig>>>;
/**
 * resolve site.config.ts and merge with default
 * @param root
 */
declare function resolveSiteConfig(root: string): Promise<{
    siteConfig: valaxy_types.PartialDeep<SiteConfig>;
    siteConfigFile: string;
}>;

/**
 * resolve theme config from special root
 */
declare function resolveThemeConfigFromRoot(root: string): Promise<ResolvedConfig<DefaultTheme.Config>>;
/**
 * resolve theme.config.ts and merge with default
 */
declare function resolveUserThemeConfig(options: ResolvedValaxyOptions): Promise<{
    themeConfig: DefaultTheme.Config;
    themeConfigFile: string;
}>;
type ValaxyConfigExtendKey = 'vite' | 'vue' | 'unocss' | 'unocssPresets' | 'markdown' | 'extendMd' | 'addons';
type ValaxyPickConfig = Pick<ValaxyNodeConfig, ValaxyConfigExtendKey>;
type ValaxyTheme<ThemeConfig = DefaultTheme.Config> = ValaxyPickConfig & {
    themeConfig?: ThemeConfig;
};
declare function defineValaxyTheme<ThemeConfig = DefaultTheme.Config>(theme: ValaxyTheme<ThemeConfig> | ((options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyTheme<ThemeConfig>)): ValaxyTheme<ThemeConfig> | ((options: ResolvedValaxyOptions<ThemeConfig>) => ValaxyTheme<ThemeConfig>);
declare const defineTheme: typeof defineValaxyTheme;

type UnoSetup = () => Awaitable<Partial<VitePluginConfig> | undefined>;
declare function defineUnoSetup(fn: UnoSetup): UnoSetup;

declare function createServer(options: ResolvedValaxyOptions, viteConfig?: InlineConfig, serverOptions?: ValaxyServerOptions): Promise<vite.ViteDevServer>;

declare function getGitTimestamp(file: string, type?: 'created' | 'updated'): Promise<number>;

declare function resolveImportPath(importName: string, ensure?: true): string;

/**
 * is url external (http/https:)
 * @param str
 */
declare function isExternal(str: string): boolean;
/**
 * slash path for windows
 * @param str
 */
declare function slash(str: string): string;
declare function ensurePrefix(prefix: string, str: string): string;
declare function toAtFS(path: string): string;
declare function isPath(name: string): boolean;
/**
 * transform obj for vite code
 * @param obj
 */
declare function transformObject(obj: any): string;

export { type HookResult, type LoadConfigFromFileOptions, type ResolvedConfig, type ResolvedValaxyOptions, type UnoSetup, type UserInputConfig, type UserValaxyNodeConfig, type ValaxyAddonExport, type ValaxyAddonFn, type ValaxyAddonLike, type ValaxyAddonResolver, type ValaxyAddons, type ValaxyConfigExport, type ValaxyConfigExtendKey, type ValaxyConfigFn, type ValaxyEntryOptions, type ValaxyExtendConfig, type ValaxyHooks, type ValaxyNode, type ValaxyNodeConfig, type ValaxyPickConfig, type ValaxyServerOptions, type ValaxyTheme, build, createServer, defaultSiteConfig, defaultValaxyConfig, defineAddon, defineConfig, defineSiteConfig, defineTheme, defineUnoSetup, defineValaxyAddon, defineValaxyConfig, defineValaxyTheme, ensurePrefix, generateClientRedirects, getGitTimestamp, getIndexHtml, isExternal, isPath, loadConfig, loadConfigFromFile, mergeValaxyConfig, mergeViteConfigs, postProcessForSSG, processValaxyOptions, resolveAddonConfig, resolveImportPath, resolveOptions, resolveSiteConfig, resolveSiteConfigFromRoot, resolveThemeConfigFromRoot, resolveThemeValaxyConfig, resolveUserThemeConfig, resolveValaxyConfig, resolveValaxyConfigFromRoot, slash, ssgBuild, toAtFS, transformObject };
